{
    "Definitions": "Programming languages differ from natural languages that natural languages are used for interaction between people, while programming languages are designed to allow humans to communicate instructions to machines. The term computer language is sometimes used interchangeably with `` programming language''. However, usage of these terms varies among authors. one usage, programming languages are described as a subset of computer languages. Similarly, the term `` computer language'' may be used contrast to the term `` programming language'' to describe languages used computing but not considered programming languages \u2013 for example, markup languages. Some authors restrict the term `` programming language'' to Turing complete languages. Most practical programming languages are Turing complete, and as such are equivalent what programs they can compute. Another usage regards programming languages as theoretical constructs for programming abstract machines and computer languages as the subset thereof that runs on physical computers, which have finite hardware resources. John C. Reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution. He argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws input formats.",
    "Elements": "Every programming language includes fundamental elements for describing data and the operations or transformations applied to them, such as adding two numbers or selecting item from a collection. These elements are governed by syntactic and semantic rules that define their structure and meaning, respectively.",
    "Syntax": "A programming language's surface form is known as its syntax. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, some programming languages are graphical, using visual relationships between symbols to specify a program. The syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics ( either formal or hard-coded a reference implementation ). Since most languages are textual, this article discusses textual syntax. The programming language syntax is usually defined using a combination of regular expressions ( for lexical structure ) and Backus\u2013Naur form ( for grammatical structure ). Below is a simple grammar, based on Lisp: This grammar specifies the following: expression is either atom or a list; atom is either a number or a symbol; a number is unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign; a symbol is a letter followed by zero or more of any alphabetical characters ( excluding whitespace ); and a list is a matched pair of parentheses, with zero or more expressions inside it. The following are examples of well-formed token sequences this grammar: 12345, ( ) and ( a b c232 ( 1 ) ). Not all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may ( depending on the language specification and the soundness of the implementation ) result error on translation or execution. some cases, such programs may exhibit undefined behavior. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it. Using natural language as example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:'' Colorless green ideas sleep furiously.'' is grammatically well-formed but has no generally accepted meaning. `` John is a married bachelor.'' is grammatically well-formed but expresses a meaning that can not be true. The following C language fragment is syntactically correct, but performs operations that are not semantically defined ( the operation * p > > 4 has no meaning for a value having a complex type and p- > is not defined because the value of p is the null pointer ): If the type declaration on the first line were omitted, the program would trigger error on the undefined variable p during compilation. However, the program would still be syntactically correct since type declarations provide only semantic information. The grammar needed to specify a programming language can be classified by its position the Chomsky hierarchy. The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are context-free grammars. Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis undecidable problem, and generally blur the distinction between parsing and execution. contrast to Lisp's macro system and Perl's BEGIN blocks, which may contain general computations, C macros are merely string replacements and do not require code execution.",
    "Semantics": "The term semantics refers to the meaning of languages, as opposed to their form ( syntax ).",
    "Type system": "A data type is a set of allowable values and operations that can be performed on these values. Each programming language's type system defines which data types exist, the type of expression, and how type equivalence and type compatibility function the language. According to type theory, a language is fully typed if the specification of every operation defines types of data to which the operation is applicable. contrast, untyped language, such as most assembly languages, allows any operation to be performed on any data, generally sequences of bits of various lengths. practice, while few languages are fully typed, most offer a degree of typing. Because different types ( such as integers and floats ) represent values differently, unexpected results occur if one type is used when another is expected. Type checking flag this error, usually at compile time ( runtime type checking is more costly ). With strong typing, type errors can always be detected unless variables are explicitly cast to a different type. Weak typing occurs when languages allow implicit casting\u2014for example, to enable operations between variables of different types without the programmer making explicit type conversion. The more cases which this type coercion is allowed, the fewer type errors can be detected.",
    "Concurrency": "computing, multiple instructions can be executed simultaneously. Many programming languages support instruction-level and subprogram-level concurrency. By the twenty-first century, additional processing power on computers increasingly coming from the use of additional processors, which requires programmers to design software that makes use of multiple processors simultaneously to achieve improved performance. Interpreted languages such as Python and Ruby do not support the concurrent use of multiple processors. Other programming languages do support managing data shared between different threads by controlling the order of execution of key instructions via the use of semaphores, controlling access to shared data via monitor, or enabling message passing between threads.",
    "Exception handling": "Many programming languages include exception handlers, a section of code triggered by runtime errors that can deal with them two main ways: Termination: shutting down and handing over control to the operating system. This option is considered the simplest. Resumption: resuming the program near where the exception occurred. This can trigger a repeat of the exception, unless the exception handler is able to modify values to prevent the exception from reoccurring. Some programming languages support dedicating a block of code to run regardless of whether exception occurs before the code is reached; this is called finalization. There is a tradeoff between increased ability to handle exceptions and reduced performance. For example, even though array index errors are common C does not check them for performance reasons. Although programmers can write code to catch user-defined exceptions, this can clutter a program. Standard libraries some languages, such as C, use their return values to indicate exception. Some languages and their compilers have the option of turning on and off error handling capability, either temporarily or permanently.",
    "Design and implementation": "One of the most important influences on programming language design has been computer architecture. Imperative languages, the most commonly used type, were designed to perform well on Neumann architecture, the most common computer architecture. Neumann architecture, the memory stores both data and instructions, while the CPU that performs instructions on data is separate, and data must be piped back and forth to the CPU. The central elements these languages are variables, assignment, and iteration, which is more efficient than recursion on these machines. Many programming languages have been designed from scratch, altered to meet new needs, and combined with other languages. Many have eventually fallen into disuse. The birth of programming languages the 1950s stimulated by the desire to make a universal programming language suitable for all machines and uses, avoiding the need to write code for different computers. By the early 1960s, the idea of a universal language rejected due to the differing requirements of the variety of purposes for which code written.",
    "Tradeoffs": "Desirable qualities of programming languages include readability, writability, and reliability. These features can reduce the cost of training programmers a language, the amount of time needed to write and maintain programs the language, the cost of compiling the code, and increase runtime performance. Although early programming languages often prioritized efficiency over readability, the latter has grown importance since the 1970s. Having multiple operations to achieve the same result can be detrimental to readability, as is overloading operators, that the same operator can have multiple meanings. Another feature important to readability is orthogonality, limiting the number of constructs that a programmer has to learn. A syntax structure that is easily understood and special words that are immediately obvious supports readability. Writability is the ease of use for writing code to solve the desired problem. Along with the same features essential for readability, abstraction\u2014interfaces that enable hiding details from the client\u2014and expressivity\u2014enabling more concise programs\u2014additionally help the programmer write code. The earliest programming languages were tied very closely to the underlying hardware of the computer, but over time support for abstraction has increased, allowing programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. Most programming languages come with a standard library of commonly used functions. Reliability means that a program performs as specified a wide range of circumstances. Type checking, exception handling, and restricted aliasing ( multiple variable names accessing the same region of memory ) all can improve a program's reliability. Programming language design often involves tradeoffs. For example, features to improve reliability typically come at the cost of performance. Increased expressivity due to a large number of operators makes writing code easier but comes at the cost of readability. Natural-language programming has been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. Edsger W. Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs. Alan Perlis similarly dismissive of the idea.",
    "Specification": "The specification of a programming language is artifact that the language users and the implementors can use to agree upon whether a piece of source code is a valid program that language, and if what its behavior shall be. A programming language specification can take several forms, including the following: explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written natural language ( e.g., as the C language ), or a formal semantics ( e.g., as Standard ML and Scheme specifications ). A description of the behavior of a translator for the language ( e.g., the C++ and Fortran specifications ). The syntax and semantics of the language have to be inferred from this description, which may be written natural or formal language. A reference or model implementation, sometimes written the language being specified ( e.g., Prolog or ANSI REXX ). The syntax and semantics of the language are explicit the behavior of the reference implementation.",
    "Implementation": "implementation of a programming language is the conversion of a program into machine code that can be executed by the hardware. The machine code then can be executed with the help of the operating system. The most common form of interpretation production code is by a compiler, which translates the source code via intermediate-level language into machine code, known as executable. Once the program is compiled, it run more quickly than with other implementation methods. Some compilers are able to provide further optimization to reduce memory or computation usage when the executable runs, but increasing compilation time. Another implementation method is to run the program with interpreter, which translates each line of software into machine code just before it executes. Although it can make debugging easier, the downside of interpretation is that it runs 10 to 100 times slower than a compiled executable. Hybrid interpretation methods provide some of the benefits of compilation and some of the benefits of interpretation via partial compilation. One form this takes is just-in-time compilation, which the software is compiled ahead of time into intermediate language, and then into machine code immediately before execution.",
    "Proprietary languages": "Although most of the most commonly used programming languages have fully open specifications and implementations, many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor, which may claim that such a proprietary language is their intellectual property. Proprietary programming languages are commonly domain-specific languages or internal scripting languages for a single product; some proprietary languages are used only internally within a vendor, while others are available to external users. Some programming languages exist on the border between proprietary and open; for example, Oracle Corporation asserts proprietary rights to some aspects of the Java programming language, and Microsoft's C # programming language, which has open implementations of most parts of the system, has Common Language Runtime ( CLR ) as a closed environment. Many proprietary languages are widely used, spite of their proprietary nature; examples include MATLAB, VBScript, and Wolfram Language. Some languages may make the transition from closed to open; for example, Erlang originally Ericsson's internal programming language. Open source programming languages are particularly helpful for open science applications, enhancing the capacity for replication and code sharing.",
    "Use": "Thousands of different programming languages have been created, mainly the computing field. Individual software projects commonly use five programming languages or more. Programming languages differ from most other forms of human expression that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers `` do exactly what they are told to do'', and can not `` understand'' what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program. On the other hand, ideas about algorithm can be communicated to humans without the precision required for execution by using pseudocode, which interleaves natural language with code written a programming language. A programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A programmer uses the abstractions present the language to represent the concepts involved a computation. These concepts are represented as a collection of the simplest elements available ( called primitives ). Programming is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment. Programs for a computer might be executed a batch process without human interaction, or a user might type commands interactive session of interpreter. this case the `` commands'' are simply programs, whose execution is chained together. When a language can run its commands through interpreter ( such as a Unix shell or other command-line interface ), without compiling, it is called a scripting language.",
    "Measuring language usage": "Determining which is the most widely used programming language is difficult since the definition of usage varies by context. One language may occupy the greater number of programmer hours, a different one has more lines of code, and a third may consume the most CPU time. Some languages are very popular for particular kinds of applications. For example, COBOL is still strong the corporate data center, often on large mainframes; Fortran scientific and engineering applications; Ada aerospace, transportation, military, real-time, and embedded applications; and C embedded applications and operating systems. Other languages are regularly used to write many different kinds of applications. Various methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed: counting the number of job advertisements that mention the language the number of books sold that teach or describe the language estimates of the number of existing lines of code written the language \u2013 which may underestimate languages not often found public searches counts of language references ( i.e., to the name of the language ) found using a web search engine. Combining and averaging information from various internet sites, stackify.com reported the ten most popular programming languages ( descending order by overall popularity ): Java, C, C++, Python, C #, JavaScript, VB.NET, R, PHP, and MATLAB. As of June 2024, the top five programming languages as measured by TIOBE index are Python, C++, C, Java and C #. TIOBE provide a list of top 100 programming languages according to popularity and update this list every month.",
    "Dialects, flavors and implementations": "A dialect of a programming language or a data exchange language is a ( relatively small ) variation or extension of the language that does not change its intrinsic nature. With languages such as Scheme and Forth, standards may be considered insufficient, inadequate, or illegitimate by implementors, often they deviate from the standard, making a new dialect. other cases, a dialect is created for use a domain-specific language, often a subset. the Lisp world, most languages that use basic S-expression syntax and Lisp-like semantics are considered Lisp dialects, although they vary wildly as do, say, Racket and Clojure. As it is common for one language to have several dialects, it can become quite difficult for inexperienced programmer to find the right documentation. The BASIC language has many dialects.",
    "Classifications": "Programming languages are often placed into four main categories: imperative, functional, logic, and object oriented. Imperative languages are designed to implement algorithm a specified order; they include visual programming languages such as.NET for generating graphical user interfaces. Scripting languages, which are partly or fully interpreted rather than compiled, are sometimes considered a separate category but meet the definition of imperative languages. Functional programming languages work by successively applying functions to the given parameters. Although appreciated by many researchers for their simplicity and elegance, problems with efficiency have prevented them from being widely adopted. Logic languages are designed that the software, rather than the programmer, decides what order which the instructions are executed. Object-oriented programming\u2014whose characteristic features are data abstraction, inheritance, and dynamic dispatch\u2014is supported by most popular imperative languages and some functional languages. Although markup languages are not programming languages, some have extensions that support limited programming. Additionally, there are special-purpose languages that are not easily compared to other programming languages."
}
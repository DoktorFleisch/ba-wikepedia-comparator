{
    "Definition and purpose": "operating system is difficult to define, but has been called `` the layer of software that manages a computer's resources for its users and their applications''. Operating systems include the software that is always running, called a kernel\u2014but can include other software as well. The two other types of programs that can run on a computer are system programs\u2014which are associated with the operating system, but may not be part of the kernel\u2014and applications\u2014all other software. There are three main purposes that operating system fulfills: Operating systems allocate resources between different applications, deciding when they receive central processing unit ( CPU ) time or space memory. On modern personal computers, users often want to run several applications at once. order to ensure that one program can not monopolize the computer's limited hardware resources, the operating system gives each application a share of the resource, either time ( CPU ) or space ( memory ). The operating system must isolate applications from each other to protect them from errors and security vulnerabilities another application's code, but enable communications between different applications. Operating systems provide interface that abstracts the details of accessing hardware details ( such as physical memory ) to make things easier for programmers. Virtualization enables the operating system to mask limited hardware resources; for example, virtual memory can provide a program with the illusion of nearly unlimited memory that exceeds the computer's actual memory. Operating systems provide common services, such as interface for accessing network and disk devices. This enables application to be run on different hardware without needing to be rewritten. Which services to include operating system varies greatly, and this functionality makes up the great majority of code for most operating systems.",
    "History": "The first computers the late 1940s and 1950s were directly programmed either with plugboards or with machine code inputted on media such as punch cards, without programming languages or operating systems. After the introduction of the transistor the mid-1950s, mainframes began to be built. These still needed professional operators who manually do what a modern operating system would do, such as scheduling programs to run, but mainframes still had rudimentary operating systems such as Fortran Monitor System ( FMS ) and IBSYS. the 1960s, IBM introduced the first series of intercompatible computers ( System/360 ). All of them ran the same operating system\u2014OS/360\u2014which consisted of millions of lines of assembly language that had thousands of bugs. The OS/360 the first popular operating system to support multiprogramming, such that the CPU could be put to use on one job while another waiting on input/output ( I/O ). Holding multiple jobs memory necessitated memory partitioning and safeguards against one job accessing the memory allocated to a different one. Around the same time, teleprinters began to be used as terminals multiple users could access the computer simultaneously. The operating system MULTICS intended to allow hundreds of users to access a large computer. Despite its limited adoption, it can be considered the precursor to cloud computing. The UNIX operating system originated as a development of MULTICS for a single user. Because UNIX's source code available, it became the basis of other, incompatible operating systems, of which the most successful were AT & T's System V and the University of California's Berkeley Software Distribution ( BSD ). To increase compatibility, the IEEE released the POSIX standard for operating system application programming interfaces ( APIs ), which is supported by most UNIX systems. MINIX a stripped-down version of UNIX, developed 1987 for educational uses, that inspired the commercially available, free software Linux. Since 2008, MINIX is used controllers of most Intel microchips, while Linux is widespread data centers and Android smartphones.",
    "Microcomputers": "The invention of large scale integration enabled the production of personal computers ( initially called microcomputers ) from around 1980. For around five years, the CP/M ( Control Program for Microcomputers ) the most popular operating system for microcomputers. Later, IBM bought the DOS ( Disk Operating System ) from Microsoft. After modifications requested by IBM, the resulting system called MS-DOS ( MicroSoft Disk Operating System ) and widely used on IBM microcomputers. Later versions increased their sophistication, part by borrowing features from UNIX. Apple's Macintosh the first popular computer to use a graphical user interface ( GUI ). The GUI proved much more user friendly than the text-only command-line interface earlier operating systems had used. Following the success of Macintosh, MS-DOS updated with a GUI overlay called Windows. Windows later rewritten as a stand-alone operating system, borrowing many features from another ( VAX VMS ) that a large legal settlement paid. the twenty-first century, Windows continues to be popular on personal computers but has less market share of servers. UNIX operating systems, especially Linux, are the most popular on enterprise systems and servers but are used on mobile devices and many other computer systems. On mobile devices, Symbian OS dominant at first, being usurped by BlackBerry OS ( introduced 2002 ) and iOS for iPhones ( from 2007 ). Later on, the open-source Android operating system ( introduced 2008 ), with a Linux kernel and a C library ( Bionic ) partially based on BSD code, became most popular.",
    "Components": "The components of operating system are designed to ensure that various parts of a computer function cohesively. With the de facto obsoletion of DOS, all user software must interact with the operating system to access hardware.",
    "Kernel": "The kernel is the part of the operating system that provides protection between different applications and users. This protection is key to improving reliability by keeping errors isolated to one program, as well as security by limiting the power of malicious software and protecting private data, and ensuring that one program can not monopolize the computer's resources. Most operating systems have two modes of operation: user mode, the hardware checks that the software is only executing legal instructions, whereas the kernel has unrestricted powers and is not subject to these checks. The kernel manages memory for other processes and controls access to input/output devices.",
    "Concurrency": "Concurrency refers to the operating system's ability to carry out multiple tasks simultaneously. Virtually all modern operating systems support concurrency. Threads enable splitting a process' work into multiple parts that can run simultaneously. The number of threads is not limited by the number of processors available. If there are more threads than processors, the operating system kernel schedules, suspends, and resumes threads, controlling when each thread runs and how much CPU time it receives. During a context switch a running thread is suspended, its state is saved into the thread control block and stack, and the state of the new thread is loaded. Historically, on many systems a thread could run until it relinquished control ( cooperative multitasking ). Because this model can allow a single thread to monopolize the processor, most operating systems now can interrupt a thread ( preemptive multitasking ). Threads have their own thread ID, program counter ( PC ), a register set, and a stack, but share code, heap data, and other resources with other threads of the same process. Thus, there is less overhead to create a thread than a new process. On single-CPU systems, concurrency is switching between processes. Many computers have multiple CPUs. Parallelism with multiple threads running on different CPUs can speed up a program, depending on how much of it can be executed concurrently.",
    "File system": "Permanent storage devices used twenty-first century computers, unlike volatile dynamic random-access memory ( DRAM ), are still accessible after a crash or power failure. Permanent ( non-volatile ) storage is much cheaper per byte, but takes several orders of magnitude longer to access, read, and write. The two main technologies are a hard drive consisting of magnetic disks, and flash memory ( a solid-state drive that stores data electrical circuits ). The latter is more expensive but faster and more durable. File systems are abstraction used by the operating system to simplify access to permanent storage. They provide human-readable filenames and other metadata, increase performance via amortization of accesses, prevent multiple threads from accessing the same section of memory, and include checksums to identify corruption. File systems are composed of files ( named collections of data, of arbitrary size ) and directories ( called folders ) that list human-readable filenames and other directories. absolute file path begins at the root directory and lists subdirectories divided by punctuation, while a relative path defines the location of a file from a directory. System calls ( which are sometimes wrapped by libraries ) enable applications to create, delete, open, and close files, as well as link, read, and write to them. All these operations are carried out by the operating system on behalf of the application. The operating system's efforts to reduce latency include storing recently requested blocks of memory a cache and prefetching data that the application has not asked for, but might need next. Device drivers are software specific to each input/output ( I/O ) device that enables the operating system to work without modification over different hardware. Another component of file systems is a dictionary that maps a file's name and metadata to the data block where its contents are stored. Most file systems use directories to convert file names to file numbers. To find the block number, the operating system uses index ( often implemented as a tree ). Separately, there is a free space map to track free blocks, commonly implemented as a bitmap. Although any free block can be used to store a new file, many operating systems try to group together files the same directory to maximize performance, or periodically reorganize files to reduce fragmentation. Maintaining data reliability the face of a computer crash or hardware failure is another concern. File writing protocols are designed with atomic operations as not to leave permanent storage a partially written, inconsistent state the event of a crash at any point during writing. Data corruption is addressed by redundant storage ( for example, RAID\u2014redundant array of inexpensive disks ) and checksums to detect when data has been corrupted. With multiple layers of checksums and backups of a file, a system can recover from multiple hardware failures. Background processes are often used to detect and recover from data corruption.",
    "Security": "Security means protecting users from other users of the same computer, as well as from those who seeking remote access to it over a network. Operating systems security rests on achieving the CIA triad: confidentiality ( unauthorized users can not access data ), integrity ( unauthorized users can not modify data ), and availability ( ensuring that the system remains available to authorized users, even the event of a denial of service attack ). As with other computer systems, isolating security domains\u2014in the case of operating systems, the kernel, processes, and virtual machines\u2014is key to achieving security. Other ways to increase security include simplicity to minimize the attack surface, locking access to resources by default, checking all requests for authorization, principle of least authority ( granting the minimum privilege essential for performing a task ), privilege separation, and reducing shared data. Some operating system designs are more secure than others. Those with no isolation between the kernel and applications are least secure, while those with a monolithic kernel like most general-purpose operating systems are still vulnerable if any part of the kernel is compromised. A more secure design features microkernels that separate the kernel's privileges into many separate security domains and reduce the consequences of a single kernel breach. Unikernels are another approach that improves security by minimizing the kernel and separating out other operating systems functionality by application. Most operating systems are written C or C++, which create potential vulnerabilities for exploitation. Despite attempts to protect against them, vulnerabilities are caused by buffer overflow attacks, which are enabled by the lack of bounds checking. Hardware vulnerabilities, some of them caused by CPU optimizations, can be used to compromise the operating system. There are known instances of operating system programmers deliberately implanting vulnerabilities, such as back doors. Operating systems security is hampered by their increasing complexity and the resulting inevitability of bugs. Because formal verification of operating systems may not be feasible, developers use operating system hardening to reduce vulnerabilities, e.g. address space layout randomization, control-flow integrity, access restrictions, and other techniques. There are no restrictions on who can contribute code to open source operating systems; such operating systems have transparent change histories and distributed governance structures. Open source developers strive to work collaboratively to find and eliminate security vulnerabilities, using code review and type checking to expunge malicious code. Andrew S. Tanenbaum advises releasing the source code of all operating systems, arguing that it prevents developers from placing trust secrecy and thus relying on the unreliable practice of security by obscurity.",
    "User interface": "A user interface ( UI ) is essential to support human interaction with a computer. The two most common user interface types for any computer are command-line interface, where computer commands are typed, line-by-line, graphical user interface ( GUI ) using a visual environment, most commonly a combination of the window, icon, menu, and pointer elements, known as WIMP. For personal computers, including smartphones and tablet computers, and for workstations, user input is typically from a combination of keyboard, mouse, and trackpad or touchscreen, all of which are connected to the operating system with specialized software. Personal computer users who are not software developers or coders often prefer GUIs for both input and output; GUIs are supported by most personal computers. The software to support GUIs is more complex than a command line for input and plain text output. Plain text output is often preferred by programmers, and is easy to support.",
    "Operating system development as a hobby": "A hobby operating system may be classified as one whose code has not been directly derived from existing operating system, and has few users and active developers. some cases, hobby development is support of a `` homebrew'' computing device, for example, a simple single-board computer powered by a 6502 microprocessor. Or, development may be for architecture already widespread use. Operating system development may come from entirely new concepts, or may commence by modeling existing operating system. either case, the hobbyist is her/his own developer, or may interact with a small and sometimes unstructured group of individuals who have like interests. Examples of hobby operating systems include Syllable and TempleOS.",
    "Diversity of operating systems and portability": "If application is written for use on a specific operating system, and is ported to another OS, the functionality required by that application may be implemented differently by that OS ( the names of functions, meaning of arguments, etc. ) requiring the application to be adapted, changed, or otherwise maintained. This cost supporting operating systems diversity can be avoided by instead writing applications against software platforms such as Java or Qt. These abstractions have already borne the cost of adaptation to specific operating systems and their system libraries. Another approach is for operating system vendors to adopt standards. For example, POSIX and OS abstraction layers provide commonalities that reduce porting costs.",
    "Popular operating systems": "the personal computer market, as of September 2023, Microsoft Windows has the highest market share, around 68 %. macOS by Apple Inc. is second place ( 20 % ), and the varieties of Linux, including ChromeOS, are collectively third place ( 7 % ). the mobile sector ( including smartphones and tablets ), as of September 2023, Android's share is 68.92 %, followed by Apple's iOS and iPadOS with 30.42 %, and other operating systems with 0.66 %.",
    "Linux": "Linux is a free software distributed under the GNU General Public License ( GPL ), which means that all of its derivatives are legally required to release their source code. Linux designed by programmers for their own use, thus emphasizing simplicity and consistency, with a small number of basic elements that can be combined nearly unlimited ways, and avoiding redundancy. Its design is similar to other UNIX systems not using a microkernel. It is written C and uses UNIX System V syntax, but supports BSD syntax. Linux supports standard UNIX networking features, as well as the full suite of UNIX tools, while supporting multiple users and employing preemptive multitasking. Initially of a minimalist design, Linux is a flexible system that can work under 16 MB of RAM, but still is used on large multiprocessor systems. Similar to other UNIX systems, Linux distributions are composed of a kernel, system libraries, and system utilities. Linux has a graphical user interface ( GUI ) with a desktop, folder and file icons, as well as the option to access the operating system via a command line. Android is a partially open-source operating system closely based on Linux and has become the most widely used operating system by users, due to its popularity on smartphones and, to a lesser extent, embedded systems needing a GUI, such as `` smart watches, automotive dashboards, airplane seatbacks, medical devices, and home appliances''. Unlike Linux, much of Android is written Java and uses object-oriented design.",
    "Microsoft Windows": "Windows is a proprietary operating system that is widely used on desktop computers, laptops, tablets, phones, workstations, enterprise servers, and Xbox consoles. The operating system designed for `` security, reliability, compatibility, high performance, extensibility, portability, and international support'' \u2014later on, energy efficiency and support for dynamic devices became priorities. Windows Executive works via kernel-mode objects for important data structures like processes, threads, and sections ( memory objects, for example files ). The operating system supports demand paging of virtual memory, which speeds up I/O for many applications. I/O device drivers use the Windows Driver Model. The NTFS file system has a master table and each file is represented as a record with metadata. The scheduling includes preemptive multitasking. Windows has many security features; especially important are the use of access-control lists and integrity levels. Every process has authentication token and each object is given a security descriptor. Later releases have added even more security features."
}
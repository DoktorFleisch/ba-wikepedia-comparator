{
    "Entwicklungsgeschichte": "Sprache wurde Anfang 1990er Jahre Guido van Rossum Centrum Wiskunde & Informatica Amsterdam Nachfolger Programmier-Lehrsprache ABC entwickelt urspr\u00fcnglich verteilte Betriebssystem Amoeba gedacht. Name geht, Logo vermuten l\u00e4sst, gleichnamige Schlangengattung Python zur\u00fcck, bezog urspr\u00fcnglich englische Komikergruppe Monty Python. Dokumentation finden daher Anspielungen Sketche Flying Circus. Trotzdem etablierte Assoziation Schlange, Programmiersprache Cobra sowie Python-Toolkit \u201e Boa \u201c \u00e4u\u00dfert. erste Vollversion erschien Januar 1994 Bezeichnung Python 1.0. Gegen\u00fcber fr\u00fcheren Versionen wurden Konzepte funktionalen Programmierung implementiert, allerdings sp\u00e4ter aufgegeben wurden. 1995 2000 erschienen neue Versionen, fortlaufend Python 1.1, 1.2 etc. bezeichnet wurden. Python 2.0 erschien 16. Oktober 2000. Neue Funktionen umfassten voll funktionsf\u00e4hige Garbage Collection ( automatische Speicherbereinigung ) Unterst\u00fctzung Unicode-Zeichensatz. Python 3.0 ( Python 3000 ) erschien 3. Dezember 2008 l\u00e4ngerer Entwicklungszeit. beinhaltete tiefgreifende \u00c4nderungen Sprache, etwa Entfernen Redundanzen Befehlss\u00e4tzen veralteten Konstrukten. Python 3.0 hierdurch teilweise inkompatibel fr\u00fcheren Versionen wurde, beschloss Python Software Foundation, Python 2.7 parallel Python 3 Ende 2019 neuen Versionen unterst\u00fctzen ( Hinweise letzten 2er-Version, Support-Ende Migration siehe Abschnitt Ende Python 2 ).",
    "Ziele": "Python wurde Ziel gr\u00f6\u00dfter Einfachheit \u00dcbersichtlichkeit entworfen. zwei Ma\u00dfnahmen erreicht. kommt Sprache relativ wenigen Schl\u00fcsselw\u00f6rtern. Syntax reduziert \u00dcbersichtlichkeit optimiert. Dadurch lassen Python-basierte Skripte deutlich knapper formulieren Sprachen. Van Rossum legte Entwicklung gro\u00dfen Wert Standardbibliothek, \u00fcberschaubar leicht erweiterbar. Ergebnis schlechten Erfahrung Sprache ABC, Gegenteil Fall. Konzept erm\u00f6glicht, Python Module aufzurufen, Programmiersprachen geschrieben wurden, etwa Schw\u00e4chen Python auszugleichen. Beispielsweise zeitkritische Teile maschinenn\u00e4heren Sprachen C implementierte Routinen aufgerufen. Umgekehrt lassen Python Module Plug-ins Programme schreiben, entsprechende Unterst\u00fctzung bieten. Blender, Cinema 4D, GIMP, Maya, OpenOffice bzw. LibreOffice, PyMOL, SPSS, QGIS KiCad Fall. Python Multiparadigmensprache. bedeutet, Python zwingt Programmierer einzigen Programmierstil, erlaubt, jeweilige Aufgabe besten geeignete Paradigma w\u00e4hlen. Objektorientierte strukturierte Programmierung vollst\u00e4ndig unterst\u00fctzt, funktionale aspektorientierte Programmierung einzelne Elemente Sprache unterst\u00fctzt. Freigabe mehr benutzter Speicherbereiche erfolgt Referenzz\u00e4hlung. Datentypen dynamisch verwaltet, automatische statische Typpr\u00fcfung z. B. C++ gibt. Jedoch unterst\u00fctzt Python ab Version 3.5 optionale Typ-Annotationen, statische Typpr\u00fcfung mithilfe externer Software, Beispiel Mypy, vereinfachen.",
    "Datentypen und Strukturen": "Python besitzt gr\u00f6\u00dfere Anzahl grundlegenden Datentypen. Neben herk\u00f6mmlichen Arithmetik unterst\u00fctzt transparent beliebig gro\u00dfe Ganzzahlen komplexe Zahlen. \u00fcblichen Zeichenkettenoperationen unterst\u00fctzt. Zeichenketten Python allerdings unver\u00e4nderliche Objekte ( Java ). Daher geben Operationen, Zeichenkette ver\u00e4ndern sollen \u2013 z. B. Ersetzen Zeichen \u2013 immer neue Zeichenkette zur\u00fcck. Python Objekt: Klassen, Typen, Methoden, Module etc. Datentyp jeweils Objekt ( Wert ) gebunden Variable, d. h. Datentypen dynamisch vergeben, Smalltalk Lisp \u2013 Java. Trotz dynamischen Typverwaltung enth\u00e4lt Python gewisse Typpr\u00fcfung. strenger Perl, weniger strikt etwa Objective CAML. Implizite Umwandlungen Duck-Typing-Prinzip numerische Typen definiert, sodass beispielsweise komplexe Zahl langen Ganzzahl explizite Typumwandlung multiplizieren. Format-Operator % gibt implizite Umwandlung Objekts Zeichenkette. Operator == \u00fcberpr\u00fcft zwei Objekte ( Wert- ) Gleichheit. Operator is \u00fcberpr\u00fcft tats\u00e4chliche Identit\u00e4t zweier Objekte.",
    "Sammeltypen": "Python besitzt mehrere Sammeltypen, darunter Listen, Tupel, Mengen ( Sets ) assoziative Arrays ( Dictionaries ). Listen, Tupel Zeichenketten Folgen ( Sequenzen, Felder ) kennen fast gleichen Methoden: Zeichen Kette ebenso iterieren Elemente Liste. Au\u00dferdem gibt unver\u00e4nderlichen Objekte, Erzeugung mehr ge\u00e4ndert. Listen z. B. erweiterbare Felder, wohingegen Tupel Zeichenketten feste L\u00e4nge unver\u00e4nderlich. Zweck Unver\u00e4nderlichkeit h\u00e4ngt z. B. Dictionaries zusammen, Datentyp, assoziatives Array bezeichnet. Datenkonsistenz sichern, m\u00fcssen Schl\u00fcssel Dictionary Typ \u201e unver\u00e4nderlich \u201c. Dictionary eingetragenen Werte dagegen beliebigem Typ. Sets Mengen Objekten CPython ab Version 2.4 Standardsprachumfang enthalten. Datenstruktur beliebige ( paarweise unterschiedliche ) Objekte aufnehmen stellt Mengenoperationen beispielsweise Durchschnitt, Differenz Vereinigung Verf\u00fcgung.",
    "Objektsystem": "Typsystem Python Klassensystem abgestimmt. Obwohl eingebauten Datentypen genau genommen Klassen, Klassen Typ erben. Eigenschaften Zeichenketten W\u00f6rterb\u00fcchern erweitern \u2013 Ganzzahlen. Python unterst\u00fctzt Mehrfachvererbung. Sprache unterst\u00fctzt direkt Umgang Typen Klassen. Typen ausgelesen ( ermittelt ) verglichen verhalten Objekte \u2013 tats\u00e4chlich Typen ( Smalltalk ) Objekt. Attribute Objektes W\u00f6rterbuch extrahiert.",
    "Syntax": "Entwurfsziele Python gute Lesbarkeit Quellcodes. Anweisungen benutzen h\u00e4ufig englische Schl\u00fcsselw\u00f6rter, Sprachen Symbole einsetzen ( z. B. or statt || ). strukturierte Programmierung besitzt Python folgenden Elemente: Schleifen ( wiederholte Ausf\u00fchrung ): for \u2026 else Iteration Elemente Sequenz while \u2026 else Wiederholung, solange Ausdruck Boolean-Wert True Verzweigungen ( bedingte Ausf\u00fchrung ): if \u2026 elif \u2026 else bedingte Verzweigungen match \u2026 case \u2026 if strukturiertes Pattern Matching Exceptions ( Ausf\u00fchrung Fehlerfall ): try \u2026 except \u2026 else \u2026 finally Ausnahmebehandlungen with Ausf\u00fchren Blocks Kontext-Manager Gegensatz vielen Sprachen for- while-Schleifen else-Zweig. ausgef\u00fchrt, Schleife vollst\u00e4ndig durchlaufen mittels break, return Ausnahme abgebrochen wurde.",
    "Strukturierung durch Einr\u00fccken": "Python benutzt Miranda Haskell Einr\u00fcckungen Strukturierungselement. Idee wurde erstmals Peter J. Landin vorgeschlagen off-side rule ( \u201e Abseitsregel \u201c ) genannt. meisten Programmiersprachen Bl\u00f6cke Klammern Schl\u00fcsselw\u00f6rter markiert, unterschiedlich gro\u00dfe Leerr\u00e4ume au\u00dferhalb Zeichenketten spezielle Semantik tragen. Laut van Rossum verhindert Einr\u00fcckung Teil Sprachsyntax Missverst\u00e4ndnisse Programmierers, spart Raum Vergleich Einr\u00fcckungskonventionen, Klammern eigene Zeile setzen setzt Stil-Diskussionen Ende. Hierzu Beispiel Berechnung Fakult\u00e4t Ganzzahl, C Python: Fakult\u00e4tsfunktion C: gleiche Funktion Python: jedoch darauf achten, Einr\u00fcckungen gesamten Programmtext gleich gestalten. gemischte Verwendung Leerzeichen Tabulatorzeichen Problemen f\u00fchren, Python-Interpreter Tabulatoren Abstand acht Leerzeichen annimmt. Je Konfiguration Editors Tabulatoren optisch weniger acht Leerzeichen dargestellt, Syntaxfehlern ungewollter Programmstrukturierung f\u00fchren. vorbeugende Ma\u00dfnahme Editor Tabulatorzeichen feste Anzahl Leerzeichen ersetzen lassen. Python-Distribution enth\u00e4lt Standardbibliothek Modul tabnanny, Vermischung Tabulator- Leerzeichen erkennen beheben hilft. Fakult\u00e4tsfunktion C einzeilig tern\u00e4rem Operator formulieren: Fakult\u00e4tsfunktion C: Fakult\u00e4tsfunktion Python:",
    "Funktionales Programmieren": "Coconut Erweiterungen erleichtern funktionale Programmieren Python. Dar\u00fcber hinaus l\u00e4sst herk\u00f6mmlichen Python realisieren: Ausdrucksstarke syntaktische Elemente funktionalen Programmierung vereinfachen Arbeiten Listen Sammeltypen. Vereinfachung Listennotation, funktionalen Programmiersprache Haskell stammt; Berechnung ersten f\u00fcnf Zweierpotenzen: Python Funktionen Argumente auftreten d\u00fcrfen, ausgekl\u00fcgeltere Konstruktionen ausdr\u00fccken, Continuation-Passing Style. Pythons Schl\u00fcsselwort lambda Anh\u00e4nger funktionalen Programmierung fehlleiten. lambda-Bl\u00f6cke Python Ausdr\u00fccke enthalten, Anweisungen. Anweisungen generell verwendet, Funktion zur\u00fcckzugeben. \u00fcbliche Vorgehensweise stattdessen, Namen lokalen Funktion zur\u00fcckzugeben. folgende Beispiel zeigt anhand einfachen Funktion Ideen Haskell Brooks Curry: Currying einfache Art m\u00f6glich, generische Funktionsobjekte problemspezifische herunterzubrechen. einfaches Beispiel: curry-Funktion aufgerufen, erwartet Funktion zwei notwendigen Parametern sowie Parameterbelegung zweiten Parameter Funktion. R\u00fcckgabewert curry Funktion, Gleiche tut func, Parameter ben\u00f6tigt. Closures o. g. Mechanismen Python ebenfalls einfach m\u00f6glich. simples Beispiel Stack, intern Liste repr\u00e4sentiert: Weise erh\u00e4lt drei Funktionsobjekte pop, push, is_empty, Stack modifizieren bzw. enthaltene Elemente pr\u00fcfen, dabei l direkt zuzugreifen.",
    "Ausnahmebehandlung": "Python nutzt ausgiebig Ausnahmebehandlung ( englisch exception handling ) Mittel, Fehlerbedingungen testen. weit Python integriert, teilweise sogar m\u00f6glich, Syntaxfehler abzufangen Laufzeit behandeln. Ausnahmen Vorteile gegen\u00fcber beim Programmieren \u00fcblichen Verfahren Fehlerbehandlung ( z. B. Fehler-R\u00fcckgabewerte globale Statusvariablen ). Thread-sicher leicht h\u00f6chste Programmebene weitergegeben beliebigen Ebene Funktionsaufruffolge behandelt. korrekte Einsatz Ausnahmebehandlungen beim Zugriff dynamische Ressourcen erleichtert zudem, bestimmte Race Conditions basierende Sicherheitsl\u00fccken vermeiden, entstehen, Zugriffe bereits veralteten Statusabfragen basieren. Python-Ansatz legt Einsatz Ausnahmen nahe, wann immer Fehlerbedingung entstehen. N\u00fctzlich Prinzip beispielsweise Konstruktion robuster Eingabeaufforderungen: Programmst\u00fcck fragt Benutzer lange Zahl, Zeichenfolge eingibt, per int ( ) Ganzzahl konvertieren l\u00e4sst. Ausnahmebehandlung vermieden, Fehleingabe Laufzeitfehler f\u00fchrt, Programm Abbruch zwingt. Ebenso ber\u00fccksichtigte Interrupt-Signal ( SIGINT, h\u00e4ufig Strg+C ) mittels Ausnahmebehandlung Python abgefangen behandelt ( except KeyboardInterrupt: \u2026 ).",
    "Standardbibliothek": "m\u00e4chtige Standardbibliothek gr\u00f6\u00dften St\u00e4rken Python, wodurch viele Anwendungen eignet. \u00fcberwiegende Teil davon plattformunabh\u00e4ngig, gr\u00f6\u00dfere Python-Programme oft Unix, Windows, macOS Plattformen \u00c4nderung laufen. Module Standardbibliothek C Python geschriebenen Modulen erg\u00e4nzt. Standardbibliothek besonders Internetanwendungen zugeschnitten, Unterst\u00fctzung gro\u00dfen Anzahl Standardformaten -protokollen ( MIME HTTP ). Module Schaffung grafischer Benutzeroberfl\u00e4chen, Verbindung relationalen Datenbanken Manipulation regul\u00e4rer Ausdr\u00fccke ebenfalls enthalten.",
    "Grafische Benutzeroberfl\u00e4chen (GUI)": "Hilfe mitgelieferten Moduls Tkinter Python ( Perl Tcl ) schnell grafische Benutzeroberfl\u00e4che ( GUI ) Tk erzeugt. gibt dar\u00fcber hinaus Vielzahl weiteren Wrappern Anbietern. stellen Anbindungen ( englisch language bindings ) GUI-Toolkits z. B. PyGTK, PyQt, wxPython, PyObjC PyFLTK Verf\u00fcgung. Neben Tkinter Modul Zeichnen Turtle-Grafiken mitgeliefert.",
    "Beispiel": "triviales Beispiel sei kompakte Sortieralgorithmus Quicksort angegeben: erm\u00f6glicht insbesondere Listennotation Variablen links rechts kompakte Darstellung. Vergleich iterative Formulierung zwei Zeilen: Beispiel gesparte Schreibarbeit Listennotation. Tats\u00e4chlich Fall iterative Formulierung schnellere, pro Durchgang Feld \u201e liste \u201c iteriert zweimal Listennotation.",
    "Interaktive Benutzung": "Lisp, Ruby, Groovy Perl unterst\u00fctzt Python-Interpreter interaktiven Modus, Ausdr\u00fccke Terminal eingegeben Ergebnisse sofort betrachtet. Neulinge angenehm, Sprache lernen, erfahrene Programmierer: Code-St\u00fcckchen interaktiv ausgiebig getestet, bevor geeignetes Programm aufnimmt. Dar\u00fcber hinaus steht Python Shell Kommandozeileninterpreter verschiedene unixoide Computer-Betriebssysteme Verf\u00fcgung, neben klassischen Unix-Shellkommandos direkte Eingaben Python-Form verarbeiten. IPython popul\u00e4re interaktive Python-Shell stark erweiterter Funktionalit\u00e4t.",
    "Implementierungen": "Interpreter CPython offizielle Referenzimplementierung Programmiersprache Python deren Interpreter. Daneben gibt Java implementierten Python-Interpreter namens Jython, Bibliothek Java-Laufzeitumgebung Python verf\u00fcgbar gemacht. Compiler Au\u00dfer oben genannten Interpretern existieren Compiler, Python-Code Programmiersprache \u00fcbersetzen. Cython Python-Code effiziente C-Erweiterungen \u00fcbersetzt externer C++- C-Code angebunden. Ebenso existiert Compiler IronPython.Net-Framework- bzw. Mono-Plattform. Python Skriptsprache Programme C++ nutzen, zumeist Boost-Python-Bibliothek ( neueren Projekten ) Cython verwendet. Python-Parser Parrot Python geschriebener Just-in-time-Compiler Python, PyPy, EU gef\u00f6rdert wurde, ebenfalls Entwicklung. Python-Variante Pyston verwendet Just-in-time-Compilierung beschleunigt Ausf\u00fchrung Python-Programmen. Au\u00dferdem existiert Python-Interpreter Mikrocontroller namens MicroPython.",
    "Entwicklungsumgebung": "Neben IDLE, oft Python installiert haupts\u00e4chlich Textumgebung Shell besteht, wurden vollwertige Entwicklungsumgebungen ( IDEs ) Python entwickelt, beispielsweise Eric Python IDE, Spyder PyCharm. Weiterhin gibt Plug-ins gr\u00f6\u00dfere IDEs Eclipse, Visual Studio, IntelliJ IDEA NetBeans. Texteditoren Programmierer Vim Emacs lassen Python anpassen: einfacher Python-Mode bereits integriert, komfortablere Erweiterungen hinzugef\u00fcgt. verschiedenen GUI-Toolkits, z. B. Tkinter ( GUI-Builder ), WxPython ( wxGlade ), PyQt ( Qt Designer ), PySide, PyGTK ( Glade ), Kivy PyFLTK gibt teils eigene Editoren, denen grafische Benutzeroberfl\u00e4chen vergleichsweise einfache Art aufbauen lassen.",
    "Paketverwaltung": "Python unterst\u00fctzt Erstellung Paketen; dabei helfen distutils setuptools. Pakete PyPI, Python Package Index, gespeichert Installation abgerufen. Paketmanager \u00fcblicherweise pip alten Systemen easy_install eingesetzt. Paketversionen Anaconda ( Python-Distribution ) Paketverwaltung conda verwaltet.",
    "Verbreitung und Einsatz": "Python meisten g\u00e4ngigen Betriebssysteme frei erh\u00e4ltlich meisten Linux-Distributionen Standardumfang enthalten. Python Webserver einzubinden, Webserver-umgreifend WSGI verwendet, Nachteile CGI umgeht. WSGI stellt universelle Schnittstelle Webserver Python ( -Framework ) Verf\u00fcgung. Reihe Web-Application-Frameworks nutzt Python, darunter Django, Pylons, SQLAlchemy, TurboGears, web2py, Flask Zope. Ferner gibt Python-Interpreter Symbian-Betriebssystem, Python verschiedenen Mobiltelefonen verf\u00fcgbar. Version 2.5.1 Python Bestandteil AmigaOS 4.0.",
    "Kommerzieller Einsatz": "Bekannte kommerzielle Projekte, etwa Google Suche YouTube, basieren Teilen Python. Spieleindustrie findet Sprache bisweilen Einsatz, etwa EVE Online, World Conflict Civilization IV.",
    "In der Lehre": "Python gern Lehre eingesetzt, Python Seite einsteigerfreundlich, Seite leistungsf\u00e4hig m\u00e4chtig genug, theoretische Grundlagen Programmierung vermitteln moderne Anwendungen komplexen Datenanalysen, grafischer Programmierung Datenbankanwendungen entwickeln. Lehrb\u00fccher, explizit junge Menschen Programmiererfahrung wenden, unterst\u00fctzen unterstreichen Entwicklung. Rahmen Projektes 100-Dollar-Laptop Python Standardsprache Benutzeroberfl\u00e4che verwendet. 100-Dollar-Rechner Schulausbildung Kindern konzipiert, Benutzung daf\u00fcr gestalteten grafischen Benutzeroberfl\u00e4che \u201e Sugar \u201c Knopfdruck gerade laufende Python-Quellcode angezeigt. Kindern M\u00f6glichkeit gegeben, dahinter liegende Informationstechnik real erleben Belieben \u201e Kulissen \u201c schauen. Einplatinen-Computer Raspberry Pi ( Python Interpreter ) urspr\u00fcnglich ROM integrierten Python-Interpreter ausgeliefert. heute Python bevorzugtesten Sprachen Raspberry Pi. Standard-Betriebssystem Raspberry Pi OS kommt gro\u00dfen Python-Bibliothek Ansteuerung Hardware. Python weltweit Informatikausbildung Schulen Universit\u00e4ten eingesetzt. steht inzwischen Reihe ( kostenlosen ) didaktisch konzipierten Online-Lernplattformen Python Schule Selbststudium ab 6. Schuljahr Verf\u00fcgung \u2013 meist mehreren Sprachen. Online-Kurs Computer Science Circles z. B. Universit\u00e4t Waterloo Kanada bereitgestellt. deutsche Version betrieben deutschen Bundesweiten Informatikwettbewerben. TigerJython, gehostet P\u00e4dagogischen Hochschule Bern, Schweiz Informatikunterricht eingesetzt.",
    "In der Wissenschaft": "Wissenschaftsgemeinde genie\u00dft Python gro\u00dfe Verbreitung, haupts\u00e4chlich wegen einfachen Einstiegs Programmierung gro\u00dfen Auswahl wissenschaftlicher Bibliotheken. Oft Python innerhalb Jupyter Notebooks genutzt. Numerische Rechnungen visuelle Aufbereitung Ergebnisse Graphen meist NumPy Matplotlib erledigt. Anaconda SciPy b\u00fcndeln viele wissenschaftliche Python-Bibliotheken somit einfacher zug\u00e4nglich. TensorFlow, Keras, Scikit-learn, PyTorch u. a. gibt gro\u00dfe Bibliotheken Forschung Nutzung maschinellem Lernen Deep Learning ( K\u00fcnstliche Intelligenz ).",
    "Ende von Python 2": "Unterst\u00fctzung Python 2 beendet. letzte 2er-Version 2.7.18 20. April 2020; seit Datum Python 2 mehr unterst\u00fctzt. gibt vielf\u00e4ltige umfangreiche Dokumentationen Umstieg Tools, Migration helfen erm\u00f6glichen, Code schreiben, Python 2 3 funktioniert.",
    "Kritik": "Definition Methoden Parameter self, Instanz entspricht, deren Methode aufgerufen, explizit Parameter angegeben. Andrew Kuchling, Autor langj\u00e4hriger Python-Entwickler, unelegant objektorientiert empfunden. Python-Sch\u00f6pfer van Rossum verweist hingegen darauf, n\u00f6tig sei, bestimmte wichtige Konstrukte erm\u00f6glichen. Python-Grunds\u00e4tze lautet zudem \u201e Explicit is better than implicit \u201c. Version 3.0 wurde kritisiert, Methodendefinition Aufruf Basisklassenversion Methode explizite Angabe Klasse Instanz erfordert. wurde Verletzung DRY-Prinzips ( \u201e Don \u2019 t repeat yourself \u201c ) gesehen; au\u00dferdem behinderte Umbenennungen. Python 3.0 wurde Kritikpunkt behoben. Multiprozessor-Systemen behindert sogenannte Global Interpreter Lock ( GIL ) CPython Effizienz Python-Anwendungen, softwareseitiges Multithreading benutzen. Beschr\u00e4nkung existiert Jython IronPython. Bislang offizieller Seite geplant, GIL ersetzen, beginnend Version 3.13 mithilfe Flags deaktiviert. Alternativ empfohlen, mehrere miteinander kommunizierende Prozesse anstelle Threads verwenden. vorherrschenden Implementationen Ausf\u00fchrungsgeschwindigkeit niedriger vielen kompilierbaren Sprachen, \u00e4hnlich Perl, PHP, Dart Ruby. liegt Teil daran, Entwicklung CPython Klarheit Codes gegen\u00fcber Geschwindigkeit Vorrang einger\u00e4umt. beruft dabei Autorit\u00e4ten Donald Knuth Tony Hoare, verfr\u00fchter Optimierung abraten. Geschwindigkeitsprobleme auftreten, Optimierung Python-Codes gel\u00f6st, stattdessen JIT-Compiler PyPy verwendet zeitkritische Funktionen maschinenn\u00e4here Sprachen C Cython ausgelagert."
}